name: View env vars
on:
  workflow_dispatch:
  # pull_request_target:
  #   types: labeled

defaults:
  run:
    shell: pwsh
    
jobs:
  build:
    strategy:
      matrix:
        os: [macos-11, macos-12, ubuntu-20.04, ubuntu-22.04, windows-2019, windows]
    runs-on: ${{ matrix.os }}
    permissions:
      contents: read
      id-token: write
    steps:
    - name: Check out code from GitHub
      uses: actions/checkout@v3
      with:
        submodules: recursive
        fetch-depth: 0

    - name: ping localhost
      shell: bash
      run: |
        ping localhost

    - name: Print env vars
      run: 
        Get-ChildItem env:\
      
    - name: Print actions trigger
      run: Get-Content $env:GITHUB_EVENT_PATH | ConvertFrom-Json

    - name: Dump GitHub context and PATH
      shell: bash
      env:
        GITHUB_CONTEXT: ${{ toJSON(github) }}
      run: |
        echo "$GITHUB_CONTEXT"
        echo "========================"
        echo "$PATH"

    - name: Check /etc/environment
      if: ${{ runner.os == 'Linux' }}
      shell: bash
      run: |
        cat /etc/environment

    

    # - run: echo | openssl s_client -showcerts -servername pipelinesghubeus12.actions.githubusercontent.com -connect pipelinesghubeus12.actions.githubusercontent.com:443 2>/dev/null | openssl x509 -inform pem -noout -text
    #   shell: bash

    # - name: Add cert
    #   shell: bash
    #   run: |
    #     parsed_url=$(echo $ACTIONS_ID_TOKEN_REQUEST_URL | awk -F'/' '{print $3}')
    #     echo "Parsed URL: ${parsed_url}"
    #     echo -n | openssl s_client -connect ${parsed_url}:443 | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' > /tmp/actions_cert.crt
    #     openssl x509 -in /tmp/actions_cert.crt -text
    #     sudo keytool -import -trustcacerts -keystore /etc/ssl/certs/adoptium/cacerts -storepass changeit -noprompt -alias actionscert -file /tmp/actions_cert.crt

    # - name: ll
    #   shell: bash
    #   run: |
    #     ll
      
#     - name: Test versions
#       run: |
#           $imageVersionComponents = $env:ImageVersion.Split('.')
#           $imageMajorVersion = $imageVersionComponents[0]
#           $imageMinorVersion = $imageVersionComponents[1]
#           if ("$imageMajorVersion.$imageMinorVersion" -ne '20230619.1') {
#             throw "Current runner $imageMajorVersion.$imageMinorVersion image version doesn't match ${{ github.event.client_payload.imageVersion }}."
#           }else{
#             Write-Host "Versions match"
#           }
        
